{"version":3,"sources":["components/NavBar.jsx","components/Home.jsx","components/CreatePost.jsx","components/ShowAllPosts.jsx","components/ShowSinglePost.jsx","App.js","serviceWorker.js","reducers/rooReducer.jsx","index.js"],"names":["NavBar","to","className","Home","CreatePost","state","post","handleClick","e","preventDefault","username","document","querySelector","title","content","UI","uuid","v4","setState","id","value","setTimeout","props","history","push","this","addPost","type","onClick","Component","connect","dispatch","ShowAllPosts","posts","postList","length","map","key","ShowSinglePost","deletePost","ownProps","match","params","path_id","find","App","exact","path","component","Boolean","window","location","hostname","initState","rootReducer","action","newPosts","filter","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb068086.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport '../styles/navBar.css'\n\nconst NavBar = () => {\n    return (\n        <ul>\n            <li><NavLink to=\"/\" className='link'>Home</NavLink></li>\n            <li><NavLink to=\"/createPost\" className='link'>CreatePost</NavLink></li>\n            <li><NavLink to=\"/showAllPosts\" className='link'>ShowAllPosts</NavLink></li>\n        </ul>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport '../styles/home.css'\n\nconst Home = () => {\n    return (\n        <h1 className='home'>Welcome to our Blog site.</h1>\n    )\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport uuid from 'uuid';\nimport '../styles/createPost.css';\n\nclass CreatePost extends Component {\n    \n    state = {\n        post: {}\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n        const username = document.querySelector('#username');\n        const title = document.querySelector('#title');\n        const content = document.querySelector('#content');\n        let UI = uuid.v4();\n        this.setState({\n            post: {id: UI, username: username.value, title: title.value, content: content.value}\n        })\n        setTimeout(() => {\n            this.props.history.push('/showAllPosts');\n        }, 500)\n    }\n\n    render(){\n        // console.log(this.state.post)\n        this.props.addPost(this.state.post);\n        return (\n            <form>\n                <div className='formRow'><span>Username:</span><input type=\"text\" id=\"username\" /></div>\n                <div className='formRow'><span>Title:</span><input type=\"text\" id=\"title\" /></div>\n                <div className='formRow'><span>Content:</span><input type=\"text\" id=\"content\" /></div>\n                <input type=\"submit\" value=\"Create a post\" onClick={this.handleClick} />\n            </form>\n        )\n    }\n}\n\n// const mapStateToProps = (state, ownProps) => {\n//     let id = ownProps.match.params.path_id;\n//     return {\n//         post: state.posts[id - 1]\n//     }\n// }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (post) => { dispatch({type: 'ADD_POST', post: post}) }\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(CreatePost);\n// export default CreatePost;","import React, { Component } from 'react';\nimport '../styles/showAllPosts.css';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nclass ShowAllPosts extends Component {\n\n   \n    \n    render() {\n        // console.log('props', this.props)\n        const { posts } = this.props;\n        const postList = posts.length ? (\n            posts.map(post => {\n                return(\n                    <div className=\"postCard\" key={post.id}>\n                    <Link to={'/' + post.id} ><h3>{post.title}</h3></Link>\n                    </div>\n                )\n            })\n        ) : (<h1>No posts!</h1>);\n        return (\n            <div className=\"showPosts\">\n                <h1>ShowAllPosts</h1>\n                {postList}\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        posts: state.posts\n    }\n}\n\nexport default connect(mapStateToProps)(ShowAllPosts);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/showSinglePost.css';\n\nclass ShowSinglePost extends Component {\n\n    handleClick = () => {\n        this.props.deletePost(this.props.post.id);\n        this.props.history.push('/createPost');\n    }\n\n    render() {\n        // console.log(this.props)\n        // const { post } = this.props;\n        // const singlePost = post ? (\n        //     <div>\n        //         <h4> {post.title} </h4>\n        //         <p> {post.content} </p>\n        //     </div>\n        // ) : (\n        //         <h3>Loading posts</h3>\n        //     )\n\n        return (\n            <div className=\"post\">\n                <h4> {this.props.post.title} </h4>\n                <p> {this.props.post.content} </p>\n                <button onClick={this.handleClick} >Delete post</button>\n                {/* {singlePost} */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    let id = ownProps.match.params.path_id;\n    return {\n        post: state.posts.find(post => post.id === id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deletePost: (id) => { dispatch({type: 'DELETE_POST', id: id}) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowSinglePost);","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport CreatePost from './components/CreatePost';\nimport ShowAllPosts from './components/ShowAllPosts';\nimport ShowSinglePost from './components/ShowSinglePost';\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      /* surrounding the App with a <BrowserRouter> tag, in order to create routes inside it */\n      <BrowserRouter>\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/createPost' component={CreatePost} />\n        <Route path='/showAllPosts' component={ShowAllPosts} />\n        <Route path='/:path_id' component={ShowSinglePost} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    posts: []\n}\n\nconst rootReducer = (state = initState, action) => {\n    // console.log('state', state)\n    // console.log('actions', action)\n    if (action.type === 'DELETE_POST') {\n        let newPosts = state.posts.filter(post => {\n            return action.id !== post.id;\n        });\n        return {\n            ...state,\n            posts: newPosts\n        }\n    } else if (action.type === 'ADD_POST') {\n        return {\n            ...state,\n            posts: [...state.posts, action.post]\n        }\n    }\n    return state;\n}\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rooReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}